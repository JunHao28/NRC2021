'Variables
target = 0
degree = 0
speed = 0
gyroerror = 0

'OPTIONS: Not Checked, Blue, Green, Red, Placed (Numbered from bottom to top)
For i = 1 To 6
  waitingCars[i] = "Not Checked" '(Car without black piece)
EndFor
'OPTIONS: Not Checked, Empty, Wall, Blue/Green, Red, Waiting Cars
For i = 1 To 12
  parkingLot[i] = "Not Checked" '(The 12 Parking Lots)
EndFor
'Not taken, Taken, Deposited (Numbered from Left to Right)
For i = 1 To 4
  battery[i] = "Not Taken" '(Battery)
EndFor
'Others (Not For Changing)
blueParkingLot[1] = 1
blueParkingLot[2] = 2
blueParkingLot[3] = 8
blueParkingLot[4] = 12
redParkingLot[1] = 4
redParkingLot[2] = 5
redParkingLot[3] = 7
redParkingLot[4] = 11
greenParkingLot[1] = 3
greenParkingLot[2] = 6
greenParkingLot[3] = 9
greenParkingLot[4] = 10
'1 for blue, 2 for green, 3 for red
parkingLots[1] = "Blue"
parkingLots[2] = "Blue"
parkingLots[3] = "Red"
parkingLots[4] = "Green"
parkingLots[5] = "Green"
parkingLots[6] = "Red"
parkingLots[7] = "Green"
parkingLots[8] = "Blue"
parkingLots[9] = "Red"
parkingLots[10] = "Red"
parkingLots[11] = "Green"
parkingLots[12] = "Blue"

parkingLotsSide[1] = "Right"
parkingLotsSide[2] = "Left"
parkingLotsSide[3] = "Both"
parkingLotsSide[4] = "Right"
parkingLotsSide[5] = "Both"
parkingLotsSide[6] = "Left"
parkingLotsSide[7] = "Right"
parkingLotsSide[8] = "Both"
parkingLotsSide[9] = "Left"
parkingLotsSide[10] = "Right"
parkingLotsSide[11] = "Left"
parkingLotsSide[12] = "Right"







'PID FUNCTIONS
Sub ResetMotor
  Motor.ResetCount("BC")
EndSub
Sub StopMotor
  Motor.Stop("ABCD", "True")
EndSub

Sub PIDGyroStraight
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  While Motor.GetCount("B") < degree
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    
    error = target - (Sensor.ReadRawValue(1, 0) -gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", speed, steerTurn)
    last_error = error
  EndWhile
  degree = 0
  'StopMotor()
EndSub
Sub PIDGyroStraightTillLine
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  Sensor.SetMode(2,2)
  Sensor.SetMode(3,2)
  last_error = 0

  While (Sensor.ReadRawValue(2,0) <> 1) Or (Sensor.ReadRawValue(3,0)<>1) 
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", speed, steerTurn)
    last_error = error
    LCD.Clear()
    LCD.write(1, 1, Sensor.ReadRawValue(1, 0) - gyroerror)
  EndWhile
  degree = 0
  'StopMotor()
EndSub
Sub PIDGyroReverseTillLine
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  Sensor.SetMode(2, 4)
  Sensor.SetMode(3, 4)
  last_error = 0

  While (Sensor.ReadRawValue(2, 0) <> 1) Or (Sensor.ReadRawValue(3, 0) <> 1) 
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", -speed, steerTurn)
    last_error = error
    Sensor.SetMode(2, 2)
    Sensor.SetMode(3, 2)
  EndWhile
  degree = 0
  'StopMotor()
EndSub

Sub PIDGyroReverse
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  While Motor.GetCount("B") > degree
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", -speed, steerTurn)
    last_error = error
  EndWhile
  degree = 0
  'StopMotor()
EndSub
  
Sub PIDGyroTurning
  target = Sensor.ReadRawValue(1, 0) - gyroerror + target
  last_error = 0
  While (Sensor.ReadRawValue(1,0) - gyroerror <> target)
    steerTurn = 0
    error = 0 
    integral = 0
    derivative = 0
    ki = 0.7
    kp =  0.3
    kd  = 0
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSync("BC", steerTurn, -(steerTurn))
    last_error = error
    LCD.Clear()
    LCD.write(1, 1, Sensor.ReadRawValue(1, 0) - gyroerror)
  EndWhile
  StopMotor()
  Program.Delay(500)
  LCD.Clear()
  target = 0
  
EndSub
'[2] = Right sensor = Port 3

Sub PIDLineTrackingTillLine
  TotalRGBTH = 240
  Last_Error = 0
  TP = 20
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  ResetMotor()
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[2]
  rawValue2 = Sensor.ReadRaw(3,3)
  lightVal2 = rawValue2[2]
  While lightVal > 35 Or lightVal2 > 35
    readVal()
    PD()
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[2]
    rawValue2 = Sensor.ReadRaw(3,3)
    lightVal2 = rawValue2[2]
    LCD.Clear()
    LCD.write(1, 1, lightVal)
    LCD.write(1, 20, lightVal2)
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTrackingTillLine2
  TotalRGBTH = 240
  Last_Error = 0
  TP = 30
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  Intergal = 0
  ResetMotor()
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  rawValue2 = Sensor.ReadRaw(3,3)
  lightVal2 = rawValue2[1]
  While lightVal > 30 Or lightVal2 > 30
    readVal2()
    PD2()
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[2]
    rawValue2 = Sensor.ReadRaw(3,3)
    lightVal2 = rawValue2[2]
    LCD.Clear()
    LCD.write(1, 1, lightVal)
    LCD.write(1, 20, lightVal2)
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTracking
  TotalRGBTH = 240
  Last_Error = 0
  TP = 30
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  Sensor.SetMode(2, 4)
  ResetMotor()
  While Motor.GetCount("B") < degree
    readVal()
    PD()
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTracking2
  TotalRGBTH = 140
  Last_Error = 0
  TP = 20
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  Sensor.SetMode(2, 4)
  ResetMotor()
  While Motor.GetCount("B") < degree
    readVal3()
    PD2()
  EndWhile
  degree = 0
  StopMotor()
EndSub

Sub PD
  Error = lightVal - TotalRGBTH
  Intergal = Error + Intergal*0.5
  Correction = (Error * Kp) + (Error - Last_Error)*Kd + Intergal*Ki
  Motor.StartSync("BC",Math.Max(Math.Min((TP - Correction),100),-100),Math.Max(Math.Min((TP + Correction),100),-100))
  Last_Error = Error
EndSub
Sub PD2
  Error = lightVal - TotalRGBTH
  Intergal = Error + Intergal*0.5
  Correction = (Error * Kp) + (Error - Last_Error)*Kd + Intergal*Ki
  Motor.StartSync("BC",Math.Max(Math.Min((TP + Correction),100),-100),Math.Max(Math.Min((TP - Correction),100),-100))
  Last_Error = Error
EndSub
Sub readVal
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  '270 for white '30 for black '460 for white '60 for black '240 for white '20 for black
EndSub
Sub readVal2
  rawValue = Sensor.ReadRaw(3,3)
  lightVal = rawValue[1]
  '270 for white '30 for black '460 for white '60 for black '240 for white '20 for black
EndSub
Sub readVal3
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[2]
EndSub