'Variables
target = 0
degree = 0
speed = 0
gyroerror = 0
turningSpeed = 0
trackingSpeed = 0

'OPTIONS: Not Checked, Blue, Green, Red, Placed (Numbered from bottom to top)
For i = 1 To 6
  waitingCars[i] = "Not Checked" '(Car without black piece)
EndFor
'OPTIONS: Not Checked, Empty, Wall, Blue/Green, Red, Waiting Cars
For i = 1 To 12
  parkingLot[i] = "Not Checked" '(The 12 Parking Lots)
EndFor
'OPTIONS: Not taken, Taken, Deposited (Numbered from Left to Right)
For i = 1 To 4
  battery[i] = "Not Taken" '(Battery)
EndFor
'Others (Not For Changing)
blueParkingLot[1] = 1
blueParkingLot[2] = 2
blueParkingLot[3] = 8
blueParkingLot[4] = 12
redParkingLot[1] = 4
redParkingLot[2] = 5
redParkingLot[3] = 7
redParkingLot[4] = 11
greenParkingLot[1] = 3
greenParkingLot[2] = 6
greenParkingLot[3] = 9
greenParkingLot[4] = 10
'1 for blue, 2 for green, 3 for red
parkingLots[1] = "Blue"
parkingLots[2] = "Blue"
parkingLots[3] = "Red"
parkingLots[4] = "Green"
parkingLots[5] = "Green"
parkingLots[6] = "Red"
parkingLots[7] = "Green"
parkingLots[8] = "Blue"
parkingLots[9] = "Red"
parkingLots[10] = "Red"
parkingLots[11] = "Green"
parkingLots[12] = "Blue"

parkingLotsSide[1] = "Right"
parkingLotsSide[2] = "Left"
parkingLotsSide[3] = "Both"
parkingLotsSide[4] = "Both"
parkingLotsSide[5] = "Both"
parkingLotsSide[6] = "Left"
parkingLotsSide[7] = "Right"
parkingLotsSide[8] = "Both"
parkingLotsSide[9] = "Left"
parkingLotsSide[10] = "Right"
parkingLotsSide[11] = "Left"
parkingLotsSide[12] = "Right"

waitingCars[1] = "Green"
waitingCars[2] = "Red"
waitingCars[3] = "Blue"
waitingCars[4] = "Red"
waitingCars[5] = "Blue"
waitingCars[6] = "Green"
parkingLot[1] = "Empty"
parkingLot[2] = "Blue/Green"
parkingLot[3] = "Wall"
parkingLot[4] = "Red"
parkingLot[5] = "Empty"
parkingLot[6] = "Empty"
parkingLot[7] = "Blue/Green"
parkingLot[8] = "Empty"
parkingLot[9] = "Empty"
parkingLot[10] = "Empty"
parkingLot[11] = "Wall"
parkingLot[12] = "Empty"





'PID FUNCTIONS
Sub ResetMotor
  Motor.ResetCount("BC")
EndSub
Sub StopMotor
  Motor.Stop("ABCD", "True")
EndSub
Sub CloseArm
  Motor.StartSync("AD", -100, 100)
  Program.Delay(200)
  StopMotor()
EndSub

Sub PIDGyroStraight
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  While Motor.GetCount("B") < degree
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) -gyroerror)
    integral = integral + error
    derivative = error - last_error
    Correction = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", speed, steerTurn)
    last_error = error
    LCD.Clear()
    LCD.write(1, 1, Sensor.ReadRawValue(1, 0) -gyroerror)
  EndWhile
  degree = 0
  'StopMotor()
EndSub
Sub PIDGyroStraightTillLine
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  rawValue2 = Sensor.ReadRaw(3,3)
  While rawValue[0] > 40 Or rawValue2[0] > 40 Or rawValue[1] > 60 Or rawValue2[1] > 60 Or rawValue[2] > 35 Or rawValue2[2] > 35
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    Correction = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", speed, steerTurn)
    last_error = error
    rawValue = Sensor.ReadRaw(2,3)
    rawValue2 = Sensor.ReadRaw(3,3)
  EndWhile
  degree = 0
  'StopMotor()
EndSub
Sub PIDGyroReverseTillLine
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  rawValue2 = Sensor.ReadRaw(3,3)
  While rawValue[0] > 40 Or rawValue2[0] > 40 Or rawValue[1] > 60 Or rawValue2[1] > 60 Or rawValue[2] > 35 Or rawValue2[2] > 35
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", -speed, steerTurn)
    last_error = error
    rawValue = Sensor.ReadRaw(2,3)
    rawValue2 = Sensor.ReadRaw(3,3)
  EndWhile
  degree = 0
  'StopMotor()
EndSub

Sub PIDGyroReverse
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  While Motor.GetCount("B") > degree
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", -speed, steerTurn)
    last_error = error
  EndWhile
  degree = 0
  'StopMotor()
EndSub
  
Sub PIDGyroTurning
  target = Sensor.ReadRawValue(1, 0) - gyroerror + target
  last_error = 0
  If turningSpeed = 0 Then
    turningSpeed = 25
  EndIf
  ki = 0
  kp =  0.4
  kd  = 0.1
  While (Sensor.ReadRawValue(1,0) - gyroerror <> target)
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    If steerTurn < 0 Then
      TP = -10
    Else
      TP = 10
    EndIf
    Motor.StartSync("BC", Math.Max(Math.Min(steerTurn+TP,turningSpeed),-turningSpeed), Math.Max(Math.Min(-(steerTurn+TP),turningSpeed),-turningSpeed))
    last_error = error
    LCD.Clear()
    LCD.write(1, 1, Sensor.ReadRawValue(1, 0) - gyroerror)
  EndWhile
  StopMotor()
  Program.Delay(200)
  LCD.Clear()
  target = 0
  turningSpeed = 0
EndSub

Sub PIDLineTrackingTillLine
  TotalRGBTH = 200
  Last_Error = 0
  TP = trackingSpeed
  Kp = 0.095
  Ki = 0.005
  Kd = 0.40
  If TP > 60 Then
    Kp = 0.2
  EndIf
  maxSpeed = 120
  ResetMotor()
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  rawValue2 = Sensor.ReadRaw(3,3)
  While rawValue[0] > 35 Or rawValue2[0] > 35 Or rawValue[1] > 55 Or rawValue2[1] > 55 Or rawValue[2] > 30 Or rawValue2[2] > 30 
    readVal()
    PD()
    rawValue = Sensor.ReadRaw(2,3)
    rawValue2 = Sensor.ReadRaw(3,3)
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTrackingTillLine2
  TotalRGBTH = 200
  Last_Error = 0
  TP = trackingSpeed
  Kp = 0.07
  Ki = 0.001
  Kd = 0.40
  If TP > 60 Then
    Kp = 0.15
  EndIf
  Intergal = 0
  maxSpeed = 120
  ResetMotor()
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  rawValue2 = Sensor.ReadRaw(3,3)
  lightVal2 = rawValue2[1]
  While lightVal > 30 Or lightVal2 > 30
    readVal2()
    PD2()
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[2]
    rawValue2 = Sensor.ReadRaw(3,3)
    lightVal2 = rawValue2[2]
    LCD.Clear()
    LCD.write(1, 1, lightVal)
    LCD.write(1, 20, lightVal2)
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTracking
  TotalRGBTH = 200
  Last_Error = 0
  TP = trackingSpeed
  Kp = 0.095
  Ki = 0.005
  Kd = 0.40
  If TP > 60 Then
    Kp = 0.2
  EndIf
  maxSpeed = 120
  Sensor.SetMode(2, 4)
  ResetMotor()
  While Motor.GetCount("B") < degree
    readVal()
    PD()
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTracking2
  TotalRGBTH = 140
  Last_Error = 0
  TP = trackingSpeed
  Kp = 0.07
  Ki = 0.001
  Kd = 0.40
  If TP > 60 Then
    Kp = 0.15
  EndIf
  maxSpeed = 120
  Sensor.SetMode(2, 4)
  ResetMotor()
  While Motor.GetCount("B") < degree
    readVal3()
    PD2()
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTracking3
  TotalRGBTH = 200
  Last_Error = 0
  TP = trackingSpeed
  Kp = 0.07
  Ki = 0.001
  Kd = 0.40
  If TP > 60 Then
    Kp = 0.15
  EndIf
  maxSpeed = 120
  Intergal = 0
  ResetMotor()
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  While Motor.GetCount("B") < degree
    readVal2()
    PD2()
  EndWhile
  degree = 0
  StopMotor()
EndSub


Sub PD
  Error =  TotalRGBTH - lightVal
  Intergal = Error + Intergal*0.5
  Correction = (Error * Kp) + (Error - Last_Error)*Kd + Intergal*Ki
  Motor.StartSync("BC",Math.Max(Math.Min((TP + Correction),maxSpeed),-maxSpeed),Math.Max(Math.Min((TP - Correction),maxSpeed),-maxSpeed))
  Last_Error = Error
EndSub
Sub PD2
  Error = lightVal - TotalRGBTH
  Intergal = Error + Intergal*0.5
  Correction = (Error * Kp) + (Error - Last_Error)*Kd + Intergal*Ki
  Motor.StartSync("BC",Math.Max(Math.Min((TP + Correction),maxSpeed),-maxSpeed),Math.Max(Math.Min((TP - Correction),maxSpeed),-maxSpeed))
  Last_Error = Error
EndSub
Sub readVal
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
EndSub
Sub readVal2
  rawValue = Sensor.ReadRaw(3,3)
  lightVal = rawValue[1]
  '270 for white '30 for black '460 for white '60 for black '240 for white '20 for black
EndSub
Sub readVal3
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[2]
EndSub






















































'MAIN FUNCTION
Sub CollectBatteries 
  'collect batteries
  speed = 50
  ' degree = 30
  ' PIDGyroStraight()
  ' StopMotor()
  ' Motor.Move("B", 60, 320, "True")
  ' StopMotor()
  ' degree = 235
  ' PIDGyroStraight()
  ' StopMotor()
  Motor.Move("C", 50, 50, "True")
  degree = 240
  PIDGyroStraight()
  target = - 90 - Sensor.ReadRawValue(1,0) 
  PIDGyroTurning()
  StopMotor()
  Motor.MoveSync("AD", 60, -60, 60, "True")
  StopMotor()
  Motor.StartSync("BC", -35, -35)
  Program.Delay(400)
  StopMotor()
  CloseArm()
  battery[1] = "Taken"
  battery[2] = "Taken"
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Motor.Move("B", 60, 320, "True")
  Motor.Move("C", 60, 320, "True")
  ' degree = 95
  ' PIDGyroStraight()
  ' StopMotor()
  ' target = -90.0
  ' PIDGyroTurning()
  ' StopMotor()
  Motor.MoveSync("AD", 40, -40, 40, "True")
  StopMotor()
  degree = 100
  speed = 50
  PIDGyroReverse()
  StopMotor()
  Motor.StartSync("BC", -55, -55)
  Program.Delay(500)
  StopMotor()
  CloseArm()
  battery[3] = "Taken"
  battery[4] = "Taken"
  PIDGyroStraightTillLine()
  StopMotor()
  degree = 50
  PIDGyroStraight()
  StopMotor()
  target = -90.0
  trackingSpeed = 20
  PIDGyroTurning()
  PIDLineTrackingTillLine2()
  StopMotor()
  degree = 270
  trackingSpeed = 60
  PIDLineTracking3()
  StopMotor()
  degree = 20
  PIDGyroStraight()
  StopMotor()
  target = 90.0
  PIDGyroTurning()
  degree = 80
  PIDGyroStraight()
  StopMotor()
EndSub
Sub CollectWaitingCars1
  'check waiting car
  speed = 60
  Sensor.SetMode(4, 2)
  For i = 1 To 6
    If i = 1 Then
      degree = 80
    Else
      degree = 136
    EndIf
    If i = 4 Then
      PIDGyroStraight()
    Else
      trackingSpeed = 60
      PIDLineTracking2()
    EndIf
    StopMotor()
    lol[i] = Sensor.ReadRawValue(4,0)
    ' colour[1] = i
    ' WaitingCarSort()
  EndFor
  If lol[1] = 3 And lol[2] = 5 And lol[3] = 2 And lol[4] = 5 And lol[5] = 2 And lol[6] = 3 Then
    ' Speaker.note(50, "D4", 1000)
  EndIf
  speed = 50
  degree = -300
  PIDGyroReverse()
  PIDGyroReverseTillLine()
  speed = 30
  degree = -300
  PIDGyroReverse()
  StopMotor()
  Program.Delay(300)
  Motor.Move("C", 40, 335 "True")
  Motor.StartSync("AD", 30, -30)
  Program.Delay(500)
  StopMotor()
  degree = -285
  PIDGyroReverse()
  StopMotor()
  CloseArm()
  PIDGyroReverseTillLine()
  StopMotor()
  CloseArm()
  target = -85.0
  PIDGyroTurning()
  StopMotor()
  PIDGyroStraightTillLine()
  StopMotor()
EndSub
Sub DepositWaitingCars1
  collecting = "False"
  speed = 35
  degree = 110
  PIDGyroStraight()
  StopMotor()
  target = -73
  PIDGyroTurning()
  StopMotor()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 230 Or lightVal > 270 Or rawValue[2] < 110
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", -12, 12)
  EndWhile
  StopMotor()
  trackingSpeed = 80
  degree = 100
  PIDLineTracking()
  PIDLineTrackingTillLine()
  StopMotor()
  For i = 1 To 4
    ' Motor.Move("B", 20, 10, "True")
    ' StopMotor()
    ' Program.Delay(80)
    ' colour[1] = i
    ' Sensor.SetMode(4, 2)
    ' colour[2] = Sensor.ReadRawValue(4,0)
    ' ParkedCarSort()
    If (parkingLots[i] = waitingCars[1] Or parkingLots[i] = waitingCars[2]) And (parkingLot[i] = "Empty") Then
      deposit = "Right"
      parkingLot[i] = "Waiting Cars"
      If parkingLots[i] = waitingCars[1] Then
        waitingCars[1] = "Placed"
        battery[1] = "Deposited"
        depositSide = "Left"
      Else
        waitingCars[2] = "Placed"
        battery[2] = "Deposited"
        depositSide = "Right"
      EndIf
      If i = 3 Then
        collect1stBatt = "True"
        If parkingLots[i] = waitingCars[1] Then
          battery[1] = "Taken"
        Else
          battery[2] = "Taken"
        EndIf
      Else
        collect1stBatt = "False"
      EndIf
      If i = 2 Then
        towerBlock = "True"
      EndIf
      DepositingCars()
      If i <> 4 Then
        If i = 2 Then
          degree = 0
        Else
          degree = 230
        EndIf
        trackingSpeed = 80
        PIDLineTracking()
        trackingSpeed = 60
        PIDLineTrackingTillLine()
        StopMotor()
      EndIf
    Else
      If i <> 4 Then
        If i = 2 Then
          degree = 50
        Else
          degree = 250
        EndIf
        trackingSpeed = 60
        PIDLineTracking()
        trackingSpeed = 40
        PIDLineTrackingTillLine()
        StopMotor()
      EndIf
    EndIf
  EndFor
  Turn1802()
  Motor.StartSync("BC", -35, -35)
  Program.Delay(1000)
  gyroerror = Sensor.ReadRawValue(1, 0) + 90
  StopMotor()
  CloseArm()
  For i = 8 To 5 Step -1
    ' Motor.Move("B", 20, 10, "True")
    ' StopMotor()
    ' Program.Delay(80)
    ' colour[1] = i
    ' Sensor.SetMode(4, 2)
    ' colour[2] = Sensor.ReadRawValue(4,0)
    ' ParkedCarSort()
    If (parkingLots[i] = waitingCars[1] Or parkingLots[i] = waitingCars[2]) And (parkingLot[i] = "Empty") Then
      deposit = "Right"
      parkingLot[i] = "Waiting Cars"
      If parkingLots[i] = waitingCars[1] Then
        waitingCars[1] = "Placed"
        depositSide = "Left"
      Else
        waitingCars[2] = "Placed"
        depositSide = "Right"
      EndIf
      If i = 6 Then
        towerBlock = "True"
        collect1stBatt = "True"
      Else
        collect1stBatt = "False"
      EndIf
      If i = 5 Then
        special = "True"
      EndIf
      DepositingCars()
      If parkingLot[i] <> "Red" Then
        If depositSide = "Left" Then
          battery[1] = "Deposited"
        Else
          battery[2] = "Deposited"
        EndIf
      EndIf
      If i <> 5 Then
        trackingSpeed = 30
        PIDLineTrackingTillLine()
        StopMotor()
      EndIf
    Else
      If i <> 5 Then
        If i = 7 Then
          degree = 50
        Else
          degree = 250
        EndIf
        trackingSpeed = 60
        PIDLineTracking()
        trackingSpeed = 50
        PIDLineTrackingTillLine()
        StopMotor()
      EndIf
    EndIf
  EndFor
  startNumber = 1
  endNumber = 8
EndSub
Sub CollectParkedCars
  trackingSpeed = 40
  PIDLineTrackingTillLine()
  collect1 = ""
  collect2 = 0
  collectBlueGreen = "False"
  collectRed = "False"
  noOfBluegreen = 0
  bluegreencar1[1] = 0
  bluegreencar1[2] = 0
  bluegreencar1[3] = 0
  bluegreencar2[1] = ""
  bluegreencar2[2] = ""
  bluegreencar2[3] = ""
  For i = startNumber To endNumber Step 1
    If parkingLot[i] = "Blue/Green" Then
      collectBlueGreen = "True"
      noOfBluegreen = noOfBluegreen + 1
      bluegreencar1[noOfBluegreen] = i
      bluegreencar2[noOfBluegreen] = parkingLotsSide[i]
    ElseIf parkingLot[i] = "Red" Then
      collectRed = "True"
      bluegreencar1[3] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[3] = "Left"
      Else
        bluegreencar2[3] = parkingLotsSide[i]
      EndIf
    EndIf
  EndFor
  If bluegreencar2[1] = bluegreencar2[2] Then
    If bluegreencar2[1] = "Both" Then
      bluegreencar2[1] = "Left"
      bluegreencar2[2] = "Right"
    Else
      If bluegreencar1[2] > 4 Then
        bluegreencar2[2] = ""
        bluegreencar1[2] = 0
      EndIf
    EndIf
  Else
    If bluegreencar2[1] = "Both" Then
      If bluegreencar2[2] = "Left" Then
        bluegreencar2[1] = "Right"
      Else
        bluegreencar2[1] = "Left"
      EndIf
    ElseIf bluegreencar2[2] = "Both" Then
      If bluegreencar2[1] = "Left" Then
        bluegreencar2[2] = "Right"
      Else
        bluegreencar2[2] = "Left"
      EndIf
    EndIf
  EndIf
  For i = startNumber To endNumber Step 1
      If parkingLots[i] = "Red" And parkingLot[i] = "Empty" Then
        depositRed = "True"
      EndIf
    EndFor
  If collectRed And depositRed Then
    degree = 100 
    PIDLineTracking()
    Turn180()
    Program.Delay(1000)
    PIDLineTrackingTillLine()
    For i = startNumber To endNumber-4 Step 1
      If bluegreencar1[3] = i Or bluegreencar1[3] = i+4 Then
        depositSide = bluegreencar2[3]
        Program.Delay(1000)
        collect = 3
        If bluegreencar1[3] = i+4 And parkingLot[i] = "Wall" Then
          wallblock = "True"
        EndIf
        CollectionOfParkedCars()
      Else 
        If i <> 4 Then
          degree = 100
          PIDLineTracking()
        EndIf
      EndIf
      If i <> 4 Then
        PIDLineTrackingTillLine()
      EndIf
    EndFor
    If depositRed Then
      Turn180()
      Motor.StartSync("BC", -35, -35)
      Program.Delay(2000)
      For i = endNumber-5 To startNumber Step 1
        degree = 100
        PIDLineTracking()
        PIDLineTrackingTillLine()
        If parkingLots[i+1] = "Red" Then
          deposit = "Left"
          collect1stBatt = "True"
          DepositingCars()
          parkingLot[i+1] = "Red"
          collectRed = "False"
        ElseIf parkingLots[i+5] = "Red" Then
          deposit = "Right"
          collect1stBatt = "True"
          DepositingCars()
          parkingLot[i+5] = "Red"
          collectRed = "False"
        EndIf
      EndFor
    EndIf
  EndIf
  If collectBlueGreen = "True" Then
    trackingSpeed = 60
    noCollected = 0
    For i = startNumber+1 To endNumber-4 Step 1
      If bluegreencar1[1] = i And bluegreencar1[2] = i+4 Then
        collect = 1
        CollectionOfParkedCars()
        trackingSpeed = 40
        degree = 100
        PIDLineTracking()
        StopMotor()
        Program.Delay(500)
        PIDGyroReverseTillLine()
        StopMotor()
        Program.Delay(500)
        collect = 2
        CollectionOfParkedCars()
      ElseIf bluegreencar1[1] = i Or bluegreencar1[1] = i+4 Then
        collect = 1
        If bluegreencar1[1] = i+4 And parkingLot[i] = "Wall" Then
          wallblock = "True"
        EndIf
        noCollected = noCollected + 1
        If noCollected = noOfBluegreen Then
          turnOpposite = "True"
          trackTimes = i-1
        EndIf
        CollectionOfParkedCars()
      ElseIf bluegreencar1[2] = i Or bluegreencar1[2] = i+4 Then
        collect = 2
        If bluegreencar1[2] = i+4 And parkingLot[i] = "Wall" Then
          wallblock = "True"
        EndIf
        noCollected = noCollected + 1
        If noCollected = noOfBluegreen Then
          turnOpposite = "True"
          trackTimes = i-1
        EndIf
        CollectionOfParkedCars()
      Else
        degree = 200
        trackingSpeed = 60
        PIDLineTracking()
      EndIf
      If i <> 4 Then
        trackingSpeed = 40
        PIDLineTrackingTillLine()
      EndIf
    EndFor
    For i = 1 To trackTimes Step 1
      trackingSpeed = 80
      degree = 100
      PIDLineTracking()
      PIDLineTrackingTillLine()
    EndFor
  EndIf
EndSub
Sub DepositParkedCars1
  If collectBlueGreen Then
    trackingSpeed = 80
    degree = 300
    PIDLineTracking()
    PIDLineTrackingTillLine()
    StopMotor()
    CloseArm()
    speed = 50
    degree = 50
    PIDGyroStraight()
    StopMotor()
    target = 90
    PIDGyroTurning()
    trackingSpeed = 50
    degree = 200
    PIDLineTracking()
    PIDLineTrackingTillLine()
    Motor.Move("C", -40, 320, "True")
    Motor.StartSync("BC", -20, -20)
    Program.Delay(500)
    StopMotor()
    If noOfBluegreen = 2 Then
      If battery[1] = "Taken" Then
        deposit1 = "A"
        deposit2 = "D"
        deposit3 = -1
      Else
        deposit1 = "D"
        deposit2 = "A"
        deposit3 = 1
      EndIf
      Motor.Move(deposit1, deposit3*-20, 50, "True")
      degree = 70
      PIDGyroStraight()
      StopMotor()
      Motor.Start(deposit1, deposit3*60)
      Program.Delay(500)
      StopMotor()
      ' PIDGyroStraightTillLine()
      degree = 100
      PIDGyroStraight()
      StopMotor()
      Program.Delay(500)
      target = -90
      PIDGyroTurning()
      PIDGyroStraightTillLine()
      trackingSpeed = 60
      degree = 360
      PIDLineTracking()
      Motor.Move("C", -40, 320, "True")
      Motor.StartSync("BC", -20, -20)
      Program.Delay(500)
      Motor.Move(deposit2, 20, deposit3*20, "True")
      Program.Delay(500)
      degree = 90
      PIDGyroStraight()
      StopMotor()
      Motor.Start(deposit2, deposit3*-60)
      Program.Delay(200)
      StopMotor()
      degree = 20
      PIDGyroStraight()
      StopMotor()
      Motor.Move("B", 40, 320, "True")
      PIDGyroReverseTillLine()
      StopMotor()
      Motor.Move("B", 40, 320, "True")
      speed = 20
      degree = -100
      PIDGyroReverse()
    Else
      If bluegreencar2[1] = "Left" Then
        Motor.Move("A", 20, 20, "True")
        degree = 60
        PIDGyroStraight()
        StopMotor()
        Program.Delay(500)
        Motor.Start("A", -60)
      Else
        Motor.Move("D", -20, 20, "True")
        degree = 60
        PIDGyroStraight()
        StopMotor()
        Program.Delay(500)
        Motor.Start("D", 60)
      EndIf
      Program.Delay(1000)
      StopMotor()
      degree = 90
      PIDGyroStraight()
      StopMotor()
      target = -90
      PIDGyroTurning()
      PIDLineTrackingTillLine()
      Motor.Move("C", 25, 320, "True")
      degree = -100
      PIDGyroReverse()
    EndIf
  Else
    degree = 100
    PIDLineTracking()
    PIDLineTrackingTillLine()
    target = 90
    PIDGyroTurning()
    degree = 390
    PIDLineTracking2()
    Motor.Move("C", 15, 320, "True")
    degree = 390
    PIDLineTracking2()
    Motor.Move("C", 15, 320, "True")
  EndIf
EndSub
Sub CollectWaitingCars2
  Motor.StartSync("AD", 40, -40)
  Program.Delay(1000)
  StopMotor()
  speed = 25
  degree = -250
  PIDGyroReverse()
  CloseArm()
  PIDGyroReverseTillLine()
  CloseArm()
EndSub
Sub DepositWaitingCarsLeft
  turningSpeed = 35
  target = 180.0
  PIDGyroTurning()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 230 Or lightVal > 270 Or rawValue[2] < 110
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", -12, 12)
  EndWhile
  StopMotor()
  trackingSpeed = 60
  PIDLineTrackingTillLine()
  StopMotor()
  Program.Delay(500)
  deposit = "Right"
  For i = 5 To 7 Step 1
    If parkingLot[i] = "Empty" Then
      If parkingLots[i] = waitingCars[3] Then
        depositSide = "Left"
        DepositingCars()
        parkingLot[i] = "Waiting Car"
        waitingCars[3] = "Deposited"
      ElseIf parkingLots[i] = waitingCars[4] Then
        depositSide = "Right"
        DepositingCars()
        waitingCars[4] = "Deposited"
        parkingLot[i] = "Waiting Car"
      EndIf
    EndIf
    trackingSpeed = 80
    degree = 100
    PIDLineTracking()
    PIDLineTrackingTillLine()
  EndFor
  degree = 50
  PIDLineTracking()
  Turn180()
  Motor.StartSync("BC", -25, -25)
  Program.Delay(1000)
  For i = 12 To 9 Step -1
    ' Motor.Move("B", 20, 20, "True")
    ' StopMotor()
    ' colour[1] = i
    ' Sensor.SetMode(4, 2)
    ' colour[2] = Sensor.ReadRawValue(4,0)
    ' ParkedCarSort()
    deposit = "Right"
    If parkingLot[i] = "Empty" Then
      If parkingLots[i] = "Red" Then
        collect1stBatt = "True"
      Else
        collect1stBatt = "False"
      EndIf
      If i = 4 Then
        towerBlock = "True"
      EndIf
      If parkingLots[i] = waitingCars[3] Then
        depositSide = "Left"
        DepositingCars()
        parkingLot[i] = "Waiting Car"
        waitingCars[3] = "Deposited"
      ElseIf parkingLots[i] = waitingCars[4] Then
        depositSide = "Right"
        DepositingCars()
        parkingLot[i] = "Waiting Car"
        waitingCars[4] = "Deposited"
      EndIf     
    EndIf
    If parkingLots[i] <> "Red" Then
      If depositSide = "Left" Then
        If battery[1] = "Deposited" Then
          battery[3] = "Deposited"
        Else
          battery[1] = "Deposited"
        EndIf
      Else
        If battery[2] = "Deposited" Then
          battery[4] = "Deposited"
        Else
          battery[2] = "Deposited"
        EndIf
      EndIf
    EndIf
    If i <> 9 Then
      trackingSpeed = 60
      degree = 100
      PIDLineTracking()
      trackingSpeed = 40
      PIDLineTrackingTillLine()
    EndIf
  EndFor
  ' startNumber = 5
  ' endNumber = 12
  ' CollectParkedCars()
  trackingSpeed = 80
  degree = 550
  PIDLineTracking()
  Motor.Move("B", 25, 640, "True")
  degree = -200
  PIDGyroReverse()
  StopMotor()
  Motor.StartSync("AD", 25, -25)
  Program.Delay(700)
  StopMotor()
  degree = -100
  PIDGyroReverse()
  StopMotor()
  CloseArm()
  degree = 40
  PIDGyroStraight()
  Motor.Move("B", 25, 320, "True")
  degree = 200
  PIDGyroStraight()
  StopMotor()
  CloseArm()
  PIDLineTrackingTillLine()
  StopMotor()
EndSub
Sub DepositWaitingCarsRight2
  speed = 50
  degree = 100 
  PIDGyroStraight()
  StopMotor()
  target = -80
  PIDGyroTurning()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 230 Or lightVal > 270 Or rawValue[2] < 110
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", -12, 12)
  EndWhile
  StopMotor()
  trackingSpeed = 40
  PIDLineTrackingTillLine()
  StopMotor()
  deposit = "Right"
  depositSide = "Right"
  DepositingCars()
  trackingSpeed = 80
  degree = 100
  PIDLineTracking()
  PIDLineTrackingTillLine()
  degree = 100
  PIDLineTracking()
  trackingSpeed = 50
  PIDLineTrackingTillLine()
  StopMotor()
  Motor.Move("C", -35, 120, "True")
  Motor.Move("B", -35, 120, "True")
  speed = 40
  PIDGyroStraightTillLine()
  StopMotor()
  deposit = "Left"
  depositSide = "Left"
  lastCar = "True"
  DepositingCars()
  degree = 100
  PIDLineTracking()
  PIDLineTrackingTillLine()
  degree = 50
  PIDLineTracking()
  StopMotor()
  target = -90
  PIDGyroTurning()
  Motor.Move("D", -45, 60, "True")
  degree = -75
  PIDGyroReverse()
  StopMotor()
  CloseArm()
  Motor.Move("D", -25, 40, "True")
  degree = -50
  PIDGyroReverse()
  StopMotor()
  CloseArm()
  CloseArm()
  speed = 55
  PIDGyroStraightTillLine()
  Speaker.note(50, "C4", 200)
  degree = 100
  PIDGyroStraight()
  PIDGyroStraightTillLine()
  Speaker.note(50, "C4", 200)
  speed = 40
  degree = 100
  PIDGyroStraight()
  StopMotor()
  target = -90
  PIDGyroTurning()
  PIDLineTrackingTillLine()
  degree = 200
  PIDLineTracking()
  PIDLineTrackingTillLine()
  degree = 200
  PIDLineTracking()
  speed = 30
  PIDLineTrackingTillLine()
  StopMotor()
  deposit = "Right"
  lastCar = "True"
  towerBlock = "True"
  DepositingCars()
EndSub
Sub GoToPark
  speed = 70
  degree = 300
  PIDLineTracking()
  Motor.Move("C", 35, 150, "True")
  degree = 1000
  PIDGyroStraight()
  Motor.Move("C", 35, 160, "True")
  Motor.StartSync("BC", 25, 25)
  Program.Delay(1000)
EndSub







Sub DepositWaitingCars2
  parkingLot[6] = "Waiting Car"
  ' waitingCars1 = 0
  ' waitingCars2 = 0
  ' For i = 1 To 8
  '   If parkingLots[i] = waitingCars[3] And parkingLot[i] = "Empty" Then
  '     waitingCars1 = i
  '   EndIf
  ' EndFor
  ' For i = 1 To 8
  '   If parkingLots[i] = waitingCars[4] And parkingLot[i] = "Empty" And i <> waitingCars1 Then
  '     waitingCars2 = i
  '   EndIf
  ' EndFor
  ' LCD.Clear()
  ' LCD.write(1, 1, waitingCars1)
  ' LCD.write(1, 20, waitingCars2)
  ' Speaker.Note(50, "C4", 200)
  ' Program.Delay(1000)
  ' If waitingCars1 <> 0 And waitingCars2 <> 0 Then
  '   DepositWaitingCarsRight()
  ' Else
  '   DepositWaitingCarsLeft()
  ' EndIf
  DepositWaitingCarsLeft()
EndSub
Sub DepositWaitingCarsRight
  target = -95.0
  PIDGyroTurning()
  degree = 200
  PIDGyroReverse()
  Motor.StartSync("BC", -25, -25)
  Program.Delay(1000)
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  collecting = "False"
  StopMotor()
  speed = 30
  PIDGyroStraightTillLine()
  StopMotor()
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Program.Delay(1000)
  target = 80
  PIDGyroTurning()
  StopMotor()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 250 Or lightVal > 270
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", 10, -10)
  EndWhile
  StopMotor()
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  Motor.Stop("AD", "True")
  PIDLineTrackingTillLine()
  StopMotor()
  Program.Delay(500)
  For i = 1 To 4 Step 1
    If parkingLot[i] = "Empty" Then
      If waitingCars[3] = parkingLots[i] Then
        depositSide = "Left"
        deposit = "Right"
        DepositingCars()
        parkingLot[i] = "Waiting Cars"
        waitingCars[3] = "Placed"
      ElseIf waitingCars[3] = parkingLots[i+4] Then
        depositSide = "Left"
        deposit = "Left"
        DepositingCars()
        parkingLot[i+4] = "Waiting Cars"
        waitingCars[3] = "Placed"
      ElseIf waitingCars[4] = parkingLots[i] Then
        depositSide = "Right"
        deposit = "Right"
        DepositingCars()
        parkingLot[i] = "Waiting Cars"
        waitingCars[4] = "Placed"
      ElseIf waitingCars[4] = parkingLots[i+4] Then
        depositSide = "Right"
        deposit = "Left"
        DepositingCars()
        parkingLot[i+4] = "Waiting Cars"
        waitingCars[4] = "Placed"
      Else
        degree = 50
        PIDLineTracking()
      EndIf
    EndIf
    If i <> 4 Then
      PIDLineTrackingTillLine()
    EndIf
  EndFor
  If parkingLot[8] = "Empty" Then
    target = -90.0
    PIDGyroTurning()
    PIDGyroStraightTillLine()
    degree = 50
    PIDGyroStraight()
    target = -90.0
    PIDGyroTurning()
    Motor.StartSync("BC", -25, -25)
    Program.Delay(2000)
  Else
    Turn180()
    Motor.StartSync("BC", -25, -25)
    Program.Delay(2000)
    found = "False"
    For i = 7 To 5 Step 1
      If found = "False" Then
        degree = 100
        PIDLineTracking()
        PIDLineTrackingTillLine()
        If parkingLot[i] = "Empty" Then
          found = "True"
          target = 90.0
          PIDGyroTurning()
          PIDGyroStraightTillLine()
          target = 90.0
          PIDGyroTurning()
          For x = 1 To 8-i Step 1
            degree = 100
            PIDLineTracking()
            PIDLineTrackingTillLine()
          EndFor
          Turn180()
          Motor.StartSync("BC", -25, -25)
          Program.Delay(2000)
        EndIf
      EndIf
    EndFor
  EndIf
  collectRed = "False"
  compartment[1] = "False"
  compartment[2] = "False"
  For i = 12 To 9 Step 1
    Motor.Move("B", 20, 20, "True")
    StopMotor()
    colour[1] = i
    Sensor.SetMode(4, 2)
    colour[2] = Sensor.ReadRawValue(4,0)
    ParkedCarSort()
    If parkingLot[i] = "Red" Then
      collectRed = "True"
      bluegreencar1[3] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[3] = "Left"
      Else
        bluegreencar2[3] = parkingLotsSide[i]
      EndIf
      collect = 3
      depositSide = bluegreencar2[3]
      CollectionOfParkedCars()
    ElseIf parkingLot[i] = "Blue/Green" Then
      bluegreencar1[2] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[2] = "Left"
      Else
        bluegreencar2[2] = parkingLotsSide[i]
      EndIf
      collect = 2
      If bluegreencar2[2] = "Left" Then
        compartment[1] = "True"
      Else
        compartment[2] = "True"
      EndIf
      CollectionOfParkedCars()
    ElseIf collectRed = "True" And (i = 9 Or i = 10) And parkingLot[i] = "Empty" Then
      deposit = "Right"
      DepositingCars()
    EndIf
    If i <> 9 Then
      degree = 50
      PIDLineTracking()
      PIDLineTrackingTillLine()
    EndIf
  EndFor
  collectBlueGreen = "False"
  For i = 5 To 8 Step 1
    If parkingLot[i] = "Blue/Green" Then
      bluegreencar1[1] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[1] = "Left"
      Else
        bluegreencar2[1] = parkingLotsSide[i]
      EndIf
      If bluegreencar2[1] = "Left" And compartment[1] = "False" Then
        collectBlueGreen = "True"
      ElseIf bluegreencar2[1] = "Right" And compartment[2] = "False" Then
        collectBlueGreen = "True"
      EndIf
    EndIf
  EndFor
  If collectBlueGreen Then
    degree = 200
    PIDLineTracking()
    Turn180()
    PIDLineTrackingTillLine()
    For i = 5 To 8 Step 1
      If bluegreencar1[1] = i Then
        collect = 1
        CollectionOfParkedCars()
      EndIf
      If i <> 8 Then
        degree = 50
        PIDLineTracking()
        PIDLineTrackingTillLine()
      EndIf
    EndFor
    Turn180()
    Motor.StartSync("BC", -25, -25)
    Program.Delay(2000)
    For i = 1 To 4 Step 1
      degree = 50
      PIDLineTracking()
      PIDLineTrackingTillLine()
    EndFor
  EndIf
  Motor.Move("B", 15, 160, "True")
  Program.Delay(500)
  Motor.Move("C", 15, 160, "True")
  Program.Delay(500)
  PIDLineTrackingTillLine2()
EndSub
Sub DepositParkedCars2
  'Not gonna do this cus not coming out
EndSub
Sub DepositWaitingCars3
  ' waitingCars1 = 0
  ' waitingCars2 = 0
  ' For i = 1 To 8
  '   If parkingLots[i] = waitingCars[5] And parkingLot[i] = "Empty" Then
  '     waitingCars1 = i
  '   EndIf
  ' EndFor
  ' For i = 1 To 8
  '   If parkingLots[i] = waitingCars[6] And parkingLot[i] = "Empty" And i <> waitingCars1 Then
  '     waitingCars2 = i
  '   EndIf
  ' EndFor
  ' If waitingCars1 <> 0 And waitingCars2 <> 0 Then
  '   DepositWaitingCarsRight2()
  ' Else
  '   DepositWaitingCarsLeft2()
  ' EndIf
  DepositWaitingCarsRight2()
EndSub
Sub DepositWaitingCarsLeft2
  'Not gonna do this cus not coming out
EndSub
Sub DepositParkedCars3
  'write code here (Needs Work)
EndSub

'OTHER FUNCTIONS
Sub WaitingCarSort
  If colour[2] = 2 Then
    waitingCars[colour[1]] = "Blue"
  ElseIf colour[2] = 3 Then
    waitingCars[colour[1]] = "Green"
  ElseIf colour[2] = 5 Then
    waitingCars[colour[1]] = "Red"
  EndIf
EndSub
Sub ParkedCarSort
  If colour[2] = 5 Then
    parkingLot[colour[1]] = "Red"
  ElseIf colour[2] = 2 Or colour[2] = 3 Then
    parkingLot[colour[1]] = "Blue/Green"
  ElseIf colour[2] = 4 Or colour[2] = 6 Then
    parkingLot[colour[1]] = "Wall"
  Else
    parkingLot[colour[1]] = "Empty"
  EndIf
EndSub
Sub Turn180
  speed = 40
  target = 178
  PIDGyroTurning()
  Motor.Move("B", 15, 150, "True")
  Motor.Move("C", 15, 150, "True")
EndSub
Sub Turn1802
  Motor.Move("C", -35, 320, "True")
  Program.Delay(100)
  Motor.Move("B", 35, 160, "True")
  Program.Delay(100)
  Motor.Move("C", -35, 170, "True")
  Program.Delay(100)
EndSub
Sub CollectionOfParkedCars
  speed = 25
  If bluegreencar1[collect] > 4 Then
    direction = "Left"
  Else
    direction = "Right"
  EndIf
  If wallblock Then
    Motor.Move("C", -25, 120, "True")
    Motor.Move("B", -25, 120, "True")
    PIDGyroStraightTillLine()
  EndIf
  If (bluegreencar2[collect] = "Left" And direction = "Right") Or (bluegreencar2[collect] = "Right" And direction = "Left") Then
    degree = 100
  ElseIf (bluegreencar2[collect]  = "Right" And direction = "Right") Or (bluegreencar2[collect]  = "Left" And direction = "Left") Then
    degree = 60
  EndIf
  If wallblock Then
    PIDGyroStraight()
  Else
    PIDLineTracking()
  EndIf
  StopMotor()
  If direction = "Left" Then
    target = 90.0
  ElseIf direction = "Right" Then
    target = -90.0
  EndIf
  PIDGyroTurning()
  StopMotor()
  speed = 25
  If bluegreencar2[collect] = "Left" Then
    side1 = "A"
    side2 = 1
  Else
    side1 = "D"
    side2 = -1
  EndIf
  If direction = "Right" Then
    degree = -75
  Else
    degree = -180
  EndIf
  Motor.Start(side1, side2*60)
  Program.Delay(150)
  StopMotor()
  PIDGyroReverse()
  StopMotor()
  CloseArm()
  Motor.Move(side1, side2*100, 20, "True")
  degree = -60
  PIDGyroReverse()
  StopMotor()
  CloseArm()
  parkingLot[i] = "Empty"
  PIDGyroStraightTillLine()
  StopMotor()
  If direction = "Right" Or wallblock Or turnOpposite Then
    degree = 50
  Else
    degree = 130
  EndIf
  PIDGyroStraight() 
  StopMotor()
  If turnOpposite Then
    If direction = "Left" Then
      target = 90
    Else
      target = -90
    EndIf
  Else
    If direction = "Left" Then
      target = -90
    Else
      target = 90
    EndIf
  EndIf
  PIDGyroTurning()
  CloseArm()
  If wallblock And turnOpposite = "False" Then
    Motor.Move("B", 25, 150, "True")
    Motor.Move("C", 25, 150, "True")
  EndIf
  wallblock = "False"
  turnOpposite = "False"
EndSub
Sub DepositingCars
  If towerBlock Then
    speed = 20
    degree = -70
    PIDGyroReverse()
    StopMotor()
    Motor.Move("B", -35, 80, "True")
    Program.Delay(100)
    speed = 40
    degree = 200
    PIDGyroStraight()
    StopMotor()
    Program.Delay(100)
    If deposit = "Left" Then
      target = 110
    ElseIf deposit = "Right" Then
      target = -75
    EndIf
  Else
    speed = 30
    degree = 60
    PIDGyroStraight()
    If deposit = "Left" Then
      target = 90
    ElseIf deposit = "Right" Then
      target = -90
    EndIf
  EndIf
  turningSpeed = 20
  PIDGyroTurning()
  speed = 25
  If towerBlock Then
    If deposit = "Left" Then
      degree = -120
    ElseIf deposit = "Right" Then
      degree = -200
    EndIf
  Else
    If deposit = "Left" Then
      degree = -170
    ElseIf deposit = "Right" Then
      degree = -140
    EndIf
  EndIf
  PIDGyroReverse()
  StopMotor()
  If lastCar Then
    Motor.StartSync("AD", 25, -25)
    Program.Delay(500)
  Else
    If depositSide = "Left" Then
      Motor.Move("A", 50, 20, "True")
    Else
      Motor.Move("D", -50, 20, "True")
    EndIf
  EndIf
  StopMotor()
  Program.Delay(100)
  takingBattery = "True"
  If collect1stBatt Then
    degree = 50
  Else
    If depositSide = "Left" Then
      If battery[1] = "Deposited" Then
        takingBattery = "False"
        degree = 0
      Else 
        degree = 80
      EndIf
    Else
      If battery[2] = "Deposited" Then
        takingBattery = "False"
        degree = 0
      Else 
        degree = 80
      EndIf
    EndIf
  EndIf
  If lastCar Then
    degree = 0
    takingBattery = "False"
  EndIf
  If degree <> 0 Then
    PIDGyroStraight()
    StopMotor()
    If depositSide = "Left" Then
      Motor.Start("A", -50)
    Else
      Motor.Start("D", 50)
    EndIf
    Program.Delay(400)
    CloseArm()
  EndIf
  StopMotor()
  PIDGyroStraightTillLine()
  StopMotor()
  takingBattery = "False"
  If takingBattery Then
    degree = 60
    PIDGyroStraight()
    StopMotor()
    speed = 15
    If depositSide = "Left" Then
      Motor.Move("A", 50, 20, "True")
    Else
      Motor.Move("D", -50, 20, "True")
    EndIf
    Program.Delay(500)
    StopMotor()
    degree = -60
    PIDGyroReverse()
    StopMotor()
    If depositSide = "Left" Then
      Motor.Start("A", -120)
    Else
      Motor.Start("D", 120)
    EndIf
    Program.Delay(500)
    StopMotor()
    speed = 25
    degree = 80
  Else
    degree = 80
  EndIf
  PIDGyroStraight()
  StopMotor()
  CloseArm()
  If deposit = "Left" Or special Then
    target = -90
  Else
    target = 90
  EndIf
  PIDGyroTurning()
  Motor.Move("B", 35, 100, "True")
  Motor.Move("C", 35, 100, "True")
  CloseArm()
  towerBlock = "False"
  special = "False"
EndSub






'Code
Motor.Invert("B")
CloseArm()




CollectBatteries()
Sensor.Wait(1)
CollectWaitingCars1()
Sensor.Wait(1)
DepositWaitingCars1()
Sensor.Wait(1)
CollectParkedCars()
Sensor.Wait(1)
DepositParkedCars1()
Sensor.Wait(1)
CollectWaitingCars2()
Sensor.Wait(1)
DepositWaitingCars2()
Sensor.Wait(1)
DepositParkedCars2()
Sensor.Wait(1)
DepositWaitingCars3()
Sensor.Wait(1)
DepositParkedCars3()
Sensor.Wait(1)
GoToPark()