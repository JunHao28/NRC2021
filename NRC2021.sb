'Variables
target = 0
degree = 0
speed = 0
gyroerror = 0

'OPTIONS: Not Checked, Blue, Green, Red, Placed (Numbered from bottom to top)
For i = 1 To 6
  waitingCars[i] = "Not Checked" '(Car without black piece)
EndFor
'OPTIONS: Not Checked, Empty, Wall, Blue/Green, Red, Waiting Cars
For i = 1 To 12
  parkingLot[i] = "Not Checked" '(The 12 Parking Lots)
EndFor
'Not taken, Taken, Deposited (Numbered from Left to Right)
For i = 1 To 4
  battery[i] = "Not Taken" '(Battery)
EndFor
'Others (Not For Changing)
blueParkingLot[1] = 1
blueParkingLot[2] = 2
blueParkingLot[3] = 8
blueParkingLot[4] = 12
redParkingLot[1] = 4
redParkingLot[2] = 5
redParkingLot[3] = 7
redParkingLot[4] = 11
greenParkingLot[1] = 3
greenParkingLot[2] = 6
greenParkingLot[3] = 9
greenParkingLot[4] = 10
'1 for blue, 2 for green, 3 for red
parkingLots[1] = "Blue"
parkingLots[2] = "Blue"
parkingLots[3] = "Red"
parkingLots[4] = "Green"
parkingLots[5] = "Green"
parkingLots[6] = "Red"
parkingLots[7] = "Green"
parkingLots[8] = "Blue"
parkingLots[9] = "Red"
parkingLots[10] = "Red"
parkingLots[11] = "Green"
parkingLots[12] = "Blue"

parkingLotsSide[1] = "Right"
parkingLotsSide[2] = "Left"
parkingLotsSide[3] = "Both"
parkingLotsSide[4] = "Right"
parkingLotsSide[5] = "Both"
parkingLotsSide[6] = "Left"
parkingLotsSide[7] = "Right"
parkingLotsSide[8] = "Both"
parkingLotsSide[9] = "Left"
parkingLotsSide[10] = "Right"
parkingLotsSide[11] = "Left"
parkingLotsSide[12] = "Right"







'PID FUNCTIONS
Sub ResetMotor
  Motor.ResetCount("BC")
EndSub
Sub StopMotor
  Motor.Stop("ABCD", "True")
EndSub

Sub PIDGyroStraight
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  While Motor.GetCount("B") < degree
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    
    error = target - (Sensor.ReadRawValue(1, 0) -gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", speed, steerTurn)
    last_error = error
  EndWhile
  degree = 0
  'StopMotor()
EndSub
Sub PIDGyroStraightTillLine
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  Sensor.SetMode(2,2)
  Sensor.SetMode(3,2)
  last_error = 0

  While (Sensor.ReadRawValue(2,0) <> 1) Or (Sensor.ReadRawValue(3,0)<>1) 
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", speed, steerTurn)
    last_error = error
    LCD.Clear()
    LCD.write(1, 1, Sensor.ReadRawValue(1, 0) - gyroerror)
  EndWhile
  degree = 0
  'StopMotor()
EndSub
Sub PIDGyroReverseTillLine
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  Sensor.SetMode(2, 4)
  Sensor.SetMode(3, 4)
  last_error = 0

  While (Sensor.ReadRawValue(2, 0) <> 1) Or (Sensor.ReadRawValue(3, 0) <> 1) 
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", -speed, steerTurn)
    last_error = error
    Sensor.SetMode(2, 2)
    Sensor.SetMode(3, 2)
  EndWhile
  degree = 0
  'StopMotor()
EndSub

Sub PIDGyroReverse
  target = Sensor.ReadRawValue(1, 0) - gyroerror
  ResetMotor()
  last_error = 0
  While Motor.GetCount("B") > degree
    steerTurn = 0
    error = 0
    integral = 0
    derivative = 0
    ki = 0.05
    kp =  0.05
    kd  = 0.5
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSteer("BC", -speed, steerTurn)
    last_error = error
  EndWhile
  degree = 0
  'StopMotor()
EndSub
  
Sub PIDGyroTurning
  target = Sensor.ReadRawValue(1, 0) - gyroerror + target
  last_error = 0
  While (Sensor.ReadRawValue(1,0) - gyroerror <> target)
    steerTurn = 0
    error = 0 
    integral = 0
    derivative = 0
    ki = 0.7
    kp =  0.3
    kd  = 0
    error = target - (Sensor.ReadRawValue(1, 0) - gyroerror)
    integral = integral + error
    derivative = error - last_error
    steerTurn = (derivative * kd) + (error * kp) + (integral * ki)
    Motor.StartSync("BC", steerTurn, -(steerTurn))
    last_error = error
    LCD.Clear()
    LCD.write(1, 1, Sensor.ReadRawValue(1, 0) - gyroerror)
  EndWhile
  StopMotor()
  Program.Delay(500)
  LCD.Clear()
  target = 0
  
EndSub
'[2] = Right sensor = Port 3

Sub PIDLineTrackingTillLine
  TotalRGBTH = 240
  Last_Error = 0
  TP = 20
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  ResetMotor()
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[2]
  rawValue2 = Sensor.ReadRaw(3,3)
  lightVal2 = rawValue2[2]
  While lightVal > 35 Or lightVal2 > 35
    readVal()
    PD()
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[2]
    rawValue2 = Sensor.ReadRaw(3,3)
    lightVal2 = rawValue2[2]
    LCD.Clear()
    LCD.write(1, 1, lightVal)
    LCD.write(1, 20, lightVal2)
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTrackingTillLine2
  TotalRGBTH = 240
  Last_Error = 0
  TP = 30
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  Intergal = 0
  ResetMotor()
  Sensor.SetMode(3, 4)
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  rawValue2 = Sensor.ReadRaw(3,3)
  lightVal2 = rawValue2[1]
  While lightVal > 30 Or lightVal2 > 30
    readVal2()
    PD2()
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[2]
    rawValue2 = Sensor.ReadRaw(3,3)
    lightVal2 = rawValue2[2]
    LCD.Clear()
    LCD.write(1, 1, lightVal)
    LCD.write(1, 20, lightVal2)
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTracking
  TotalRGBTH = 240
  Last_Error = 0
  TP = 30
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  Sensor.SetMode(2, 4)
  ResetMotor()
  While Motor.GetCount("B") < degree
    readVal()
    PD()
  EndWhile
  degree = 0
  StopMotor()
EndSub
Sub PIDLineTracking2
  TotalRGBTH = 140
  Last_Error = 0
  TP = 20
  Kp = 0.008
  Ki = 0.001
  Kd = 0.40
  Sensor.SetMode(2, 4)
  ResetMotor()
  While Motor.GetCount("B") < degree
    readVal3()
    PD2()
  EndWhile
  degree = 0
  StopMotor()
EndSub

Sub PD
  Error = lightVal - TotalRGBTH
  Intergal = Error + Intergal*0.5
  Correction = (Error * Kp) + (Error - Last_Error)*Kd + Intergal*Ki
  Motor.StartSync("BC",Math.Max(Math.Min((TP - Correction),100),-100),Math.Max(Math.Min((TP + Correction),100),-100))
  Last_Error = Error
EndSub
Sub PD2
  Error = lightVal - TotalRGBTH
  Intergal = Error + Intergal*0.5
  Correction = (Error * Kp) + (Error - Last_Error)*Kd + Intergal*Ki
  Motor.StartSync("BC",Math.Max(Math.Min((TP + Correction),100),-100),Math.Max(Math.Min((TP - Correction),100),-100))
  Last_Error = Error
EndSub
Sub readVal
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
EndSub
Sub readVal2
  rawValue = Sensor.ReadRaw(3,3)
  lightVal = rawValue[1]
  '270 for white '30 for black '460 for white '60 for black '240 for white '20 for black
EndSub
Sub readVal3
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[2]
EndSub






















































'MAIN FUNCTION
Sub CollectBatteries 
  'collect batteries
  Motor.StartSync("AD", -75, 75)
  Program.Delay(500)
  StopMotor()
  Motor.Move("B", 25, 320, "True")
  degree = 175
  speed = 35
  PIDGyroStraight()
  target = -90.0
  PIDGyroTurning()
  StopMotor()
  Motor.MoveSync("AD", 30, -30, 55, "True")
  StopMotor()
  Motor.StartSync("BC", -20, -20)
  Program.Delay(1500)
  StopMotor()
  Program.Delay(500)
  Motor.StartSync("AD", -75, 75)
  Program.Delay(1000)
  StopMotor()
  battery[1] = "Taken"
  battery[2] = "Taken"
  speed = 35
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Motor.Move("B", 20, 320, "True")
  degree = 75
  PIDGyroStraight()
  StopMotor()
  target = -90.0
  PIDGyroTurning()
  StopMotor()
  Motor.MoveSync("AD", 30, -30, 55, "True")
  Motor.StartSync("BC", -20, -20)
  Program.Delay(1500)
  StopMotor()
  Program.Delay(500)
  Motor.StartSync("AD", -75, 75)
  Program.Delay(1000)
  StopMotor()
  battery[3] = "Taken"
  battery[4] = "Taken"
  degree = 50
  PIDGyroStraight()
  StopMotor()
  speed = 15
  target = -60.0
  PIDGyroTurning()
  StopMotor()
  degree = 315
  PIDGyroStraight()
  StopMotor()
  target = 55
  PIDGyroTurning()
  StopMotor()
  Motor.StartSync("AD", 75, -75)
  Program.Delay(500)
  StopMotor()
  Motor.MoveSync("BC", -10, -10, 100, "True")
  Motor.StartSync("AD", -75, 75)
  Program.Delay(500)
  StopMotor()
  Motor.StartSync("BC", -35, -35)
  Program.Delay(1500)
  gyroerror = Sensor.ReadRawValue(1, 0)
EndSub
Sub CollectWaitingCars1
  'check waiting car
  speed = 20
  PIDGyroStraightTillLine()
  StopMotor()
  Motor.StartSync("AD", -30, 30)
  Program.Delay(500)
  StopMotor()
  Sensor.SetMode(4, 2)
  speed = 20
  degree = 170
  PIDGyroStraight()
  StopMotor()
  For i = 1 To 6
    colour[2] = Sensor.ReadRawValue(4,0)
    colour[1] = i
    WaitingCarSort()
    If i = 5 Or i < 3 Or i = 4 Then
      degree = 140
      PIDLineTracking2()
      StopMotor()
    ElseIf i = 3 Then
      degree = 140 
      PIDGyroStraight()
      StopMotor()
    EndIf
    Program.Delay(10)
    
  EndFor
  Program.Delay(500)
  Motor.StartSync("BC", 50, 50 )
  Program.Delay(1000)
  gyroerror = Sensor.ReadRawValue(1, 0)
  speed = 20
  PIDGyroReverseTillLine()
  degree = -300
  PIDGyroReverse()
  StopMotor()
  PIDGyroReverseTillLine()
  StopMotor()
  Program.Delay(500)
  degree = 255
  PIDGyroStraight()
  StopMotor()
  Program.Delay(500)
  Motor.Move("C", 40, 335 "True")
  Motor.StartSync("AD", 30, -30)
  Program.Delay(1000)
  StopMotor()
  speed = 15
  degree = -285
  PIDGyroReverse()
  StopMotor()
  Motor.StartSync("AD", -30, 30)
  Program.Delay(2000)
  StopMotor()
  PIDGyroReverseTillLine()
  StopMotor()
  degree = 100
  PIDGyroStraight()
  StopMotor()
  target = 80.0
  speed = 25
  PIDGyroTurning()
  StopMotor()
  Motor.StartSync("BC", -35, -35)
  Program.Delay(2000)
  StopMotor()
  gyroerror = Sensor.ReadRawValue(1, 0) 
  LCD.Clear()
  LCD.write(1, 1, waitingCars[1])
  LCD.write(1, 10, waitingCars[2])
  LCD.write(1, 20, waitingCars[3])
  LCD.write(1, 30, waitingCars[4])
  LCD.write(1, 40, waitingCars[5])
  LCD.write(1, 50, waitingCars[6])
  Program.Delay(3000)
EndSub
Sub DepositWaitingCars
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  waitingCars[1] = "Blue"
  waitingCars[2] = "Red"
  collecting = "False"
  StopMotor()
  speed = 30
  PIDGyroStraightTillLine()
  StopMotor()
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Program.Delay(1000)
  target = 80
  PIDGyroTurning()
  StopMotor()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 250 Or lightVal > 270
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", 10, -10)
  EndWhile
  StopMotor()
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  Motor.Stop("AD", "True")
  PIDLineTrackingTillLine()
  StopMotor()
  Program.Delay(500)
  For i = 1 To 4
    Motor.Move("B", 20, 20, "True")
    StopMotor()
    colour[1] = i
    Sensor.SetMode(4, 2)
    colour[2] = Sensor.ReadRawValue(4,0)
    If i = 4 Then
      LCD.Clear()
      LCD.write(1, 1, colour[2])
      Program.Delay(2000)
    EndIf
    ParkedCarSort()
    If (parkingLots[i] = waitingCars[1] Or parkingLots[i] = waitingCars[2]) And (parkingLot[i] = "Empty") Then
      degree = 70
      PIDLineTracking()
      StopMotor()
      Program.Delay(500)
      target = -90.0
      PIDGyroTurning()
      StopMotor()
      Program.Delay(1000)
      Motor.StartSync("BC", -25, -25)
      Program.Delay(2000)
      StopMotor()
      gyroerror = Sensor.ReadRawValue(1, 0)
      Program.Delay(500)
      parkingLot[i] = "Waiting Cars"
      If parkingLots[i] = waitingCars[1] Then
        waitingCars[1] = "Placed"
        battery[1] = "Deposited"
        Motor.StartSync("AD", 20, 20)
        left = "True"
      Else
        waitingCars[2] = "Placed"
        battery[2] = "Deposited"
        Motor.StartSync("AD", -20, -20)
        left = "False"
      EndIf
      Program.Delay(1000)
      StopMotor()
      If i = 3 Then
        degree = 50
        If left Then
          battery[1] = "Taken"
        Else
          battery[2] = "Taken"
        EndIf
      Else
        degree = 100
      EndIf
      PIDGyroStraight()
      StopMotor()
      Motor.StartSync("AD", -100, 100)
      Program.Delay(3000)
      StopMotor()
      If left Then
        Motor.Start("A", -120)
      Else
        Motor.Start("D", 120)
      EndIf
      Program.Delay(1000)
      PIDGyroStraightTillLine()
      degree = 40
      PIDGyroStraight()
      StopMotor()
      speed = 15
      If left Then
        Motor.Start("A", 120)
      Else
        Motor.Start("D", -120)
      EndIf
      Program.Delay(500)
      StopMotor()
      degree = -60
      PIDGyroReverse()
      StopMotor()
      If left Then
        Motor.Start("A", -120)
      Else
        Motor.Start("D", 120)
      EndIf
      Program.Delay(1500)
      StopMotor()
      degree = 60
      PIDGyroStraight()
      StopMotor()
      Motor.StartSync("AD", -50, 50)
      Program.Delay(1000)
      Motor.Stop("AD", "True")
      StopMotor()
      target = 90
      PIDGyroTurning()
      If i <> 4 Then
        PIDLineTrackingTillLine()
        StopMotor()
      Else
        PIDGyroReverseTillLine()
      EndIf
    Else
      If i <> 4 Then
        degree = 100
        PIDLineTracking()
        PIDLineTrackingTillLine()
      EndIf
    EndIf
  EndFor
  Turn1802()
  Motor.StartSync("BC", -35, -35)
  Program.Delay(2000)
  gyroerror = Sensor.ReadRawValue(1, 0) + 90
  For i = 8 To 5 Step -1
    Motor.Move("B", 20, 20, "True")
    StopMotor()
    colour[1] = i
    Sensor.SetMode(4, 2)
    colour[2] = Sensor.ReadRawValue(4,0)
    ParkedCarSort()
    If (parkingLots[i] = waitingCars[1] Or parkingLots[i] = waitingCars[2]) And (parkingLot[i] = "Empty") Then
      deposit = "Right"
      parkingLot[i] = "Waiting Cars"
      If parkingLots[i] = waitingCars[1] Then
        waitingCars[1] = "Placed"
        battery[1] = "Deposited"
        depositSide = "Left"
      Else
        waitingCars[2] = "Placed"
        battery[2] = "Deposited"
        depositSide = "Right"
      EndIf
      If i = 6 Then
        collect1stBatt = "True"
      Else
        collect1stBatt = "False"
      EndIf
      DepositingCars()
      If i <> 5 Then
        PIDLineTrackingTillLine()
        StopMotor()
      EndIf
    Else
      If i <> 5 Then
        degree = 100
        PIDLineTracking()
        PIDLineTrackingTillLine()
      EndIf
    EndIf
  EndFor
  startNumber = 1
  endNumber = 8
EndSub
Sub CollectParkedCars
  collect1 = ""
  collect2 = 0
  ' parkingLot[2] = "Blue/Green"
  ' parkingLot[0] = "Red"
  ' parkingLot[5] = "Blue/Green"
  ' parkingLot[6] = "Empty"
  collectBlueGreen = "False"
  collectRed = "False"
  noOfBluegreen = 0
  bluegreencar1[1] = 0
  bluegreencar1[2] = 0
  bluegreencar1[3] = 0
  bluegreencar2[1] = ""
  bluegreencar2[2] = ""
  bluegreencar2[3] = ""
  For i = startNumber To endNumber Step 1
    If parkingLot[i] = "Blue/Green" Then
      collectBlueGreen = "True"
      noOfBluegreen = noOfBluegreen + 1
      bluegreencar1[noOfBluegreen] = i
      bluegreencar2[noOfBluegreen] = parkingLotsSide[i]
    ElseIf parkingLot[i] = "Red" Then
      collectRed = "True"
      bluegreencar1[3] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[3] = "Left"
      Else
        bluegreencar2[3] = parkingLotsSide[i]
      EndIf
    EndIf
  EndFor
  If bluegreencar2[1] = bluegreencar2[2] Then
    If bluegreencar2[1] = "Both" Then
      bluegreencar2[1] = "Left"
      bluegreencar2[2] = "Right"
    Else
      If bluegreencar1[2] > 4 Then
        bluegreencar2[2] = ""
        bluegreencar1[2] = 0
      EndIf
    EndIf
  Else
    If bluegreencar2[1] = "Both" Then
      If bluegreencar2[2] = "Left" Then
        bluegreencar2[1] = "Right"
      Else
        bluegreencar2[1] = "Left"
      EndIf
    ElseIf bluegreencar2[2] = "Both" Then
      If bluegreencar2[1] = "Left" Then
        bluegreencar2[2] = "Right"
      Else
        bluegreencar2[2] = "Left"
      EndIf
    EndIf
  EndIf
  If collectRed Then
    degree = 400 
    PIDLineTracking()
    Turn180()
    Program.Delay(1000)
    PIDLineTrackingTillLine()
    For i = startNumber To endNumber-4 Step 1
      If bluegreencar1[3] = i Or bluegreencar1[3] = i+4 Then
        depositSide = bluegreencar2[3]
        Program.Delay(1000)
        collect = 3
        CollectionOfParkedCars()
      Else 
        If i <> 4 Then
          degree = 100
          PIDLineTracking()
        EndIf
      EndIf
      If i <> 4 Then
        PIDLineTrackingTillLine()
      EndIf
    EndFor
    Turn180()
    Motor.StartSync("BC", -35, -35)
    Program.Delay(2000)
    For i = endNumber-5 To startNumber Step 1
      degree = 100
      PIDLineTracking()
      PIDLineTrackingTillLine()
      If parkingLots[i+1] = "Red" Then
        deposit = "Left"
        collect1stBatt = "True"
        DepositingCars()
        parkingLot[i+1] = "Red"
        collectRed = "False"
      ElseIf parkingLots[i+5] = "Red" Then
        deposit = "Right"
        collect1stBatt = "True"
        DepositingCars()
        parkingLot[i+5] = "Red"
        collectRed = "False"
      EndIf
    EndFor
  EndIf
  If collectBlueGreen = "True" Then
    degree = 400 
    PIDLineTracking()
    Turn180()
    PIDLineTrackingTillLine()
    For i = startNumber To endNumber-4 Step 1
      If bluegreencar1[1] = i And bluegreencar1[2] = i+4 Then
        collect = 1
        CollectionOfParkedCars()
        degree = 100
        PIDLineTracking()
        StopMotor()
        Program.Delay(500)
        PIDGyroReverseTillLine()
        StopMotor()
        Program.Delay(500)
        collect = 2
        CollectionOfParkedCars()
      ElseIf bluegreencar1[1] = i Or bluegreencar1[1] = i+4 Then
        collect = 1
        CollectionOfParkedCars()
      ElseIf bluegreencar1[2] = i Or bluegreencar1[2] = i+4 Then
        collect = 2
        CollectionOfParkedCars()
      Else
        degree = 30
        PIDLineTracking()
      EndIf
      If i <> 4 Then
        PIDLineTrackingTillLine()
      EndIf
    EndFor
    Turn180()
    Motor.StartSync("BC", -50, -50)
    Program.Delay(2000)
    For i = 1 To 3 Step 1
      degree = 100
      PIDLineTracking()
      PIDLineTrackingTillLine()
    EndFor
  Else
    PIDLineTrackingTillLine()
    degree = 100
    PIDLineTracking()
    target = -90
    PIDGyroTurning()
  EndIf
EndSub
Sub DepositParkedCars1
  collectBlueGreen = "True"
  battery[1] = "Deposited"
  battery[2] = "Taken"
  noOfBluegreen = 2
  If collectBlueGreen Then
    Motor.StartSync("AD", -25, 25)
    Program.Delay(1000)
    StopMotor()
    degree = 100
    PIDLineTracking()
    PIDLineTrackingTillLine()
    degree = 300
    PIDLineTracking()
    PIDLineTrackingTillLine()
    speed = 20
    degree = 60
    PIDGyroStraight()
    Motor.StartSync("AD", -25, 25)
    Program.Delay(1000)
    StopMotor()
    target = 90
    PIDGyroTurning()
    PIDLineTrackingTillLine()
    Motor.Move("C", -40, 320, "True")
    Motor.StartSync("BC", -20, -20)
    Program.Delay(1000)
    StopMotor()
    If noOfBluegreen = 2 Then
      If battery[1] = "Taken" Then
        deposit1 = "A"
        deposit2 = "D"
        deposit3 = -1
      Else
        deposit1 = "D"
        deposit2 = "A"
        deposit3 = 1
      EndIf
      Motor.Move(deposit1, deposit3*-20, 50, "True")
      degree = 50
      PIDGyroStraight()
      StopMotor()
      Motor.Start(deposit1, deposit3*60)
      Program.Delay(1000)
      StopMotor()
      ' PIDGyroStraightTillLine()
      degree = 100
      PIDGyroStraight()
      target = -90
      PIDGyroTurning()
      PIDGyroStraightTillLine()
      degree = 350
      PIDLineTracking()
      Motor.StartSync("BC", 20, 20)
      Program.Delay(1000)
      Motor.Move("C", -40, 320, "True")
      Motor.StartSync("BC", -20, -20)
      Program.Delay(1000)
      Motor.Move(deposit2, 20, deposit3*20, "True")
      degree = 60
      PIDGyroStraight()
      Motor.Start(deposit2, deposit3*-60)
      StopMotor()
      degree = 20
      PIDGyroStraight()
      Motor.Move("B", 40, 320, "True")
      PIDLineTrackingTillLine2()
      Motor.Move("B", 40, 320, "True")
    Else
      If bluegreencar2[1] = "Left" Then
        Motor.Move("A", 20, 20, "True")
        If battery[1] = "Taken" Then
          degree = 60
          PIDGyroStraight()
          Motor.Start("A", -60)
          Program.Delay(1000)
        EndIf
        PIDGyroStraightTillLine()
      Else
        Motor.Move("D", 20, -20, "True")
        If battery[2] = "Taken" Then
          degree = 60
          PIDGyroStraight()
          Motor.Start("D", 60)
          Program.Delay(1000)
        EndIf
        PIDGyroStraightTillLine()
      EndIf
      degree = 160
      PIDGyroStraight()
      target = 90
      PIDGyroTurning()
      PIDLineTrackingTillLine2()
      degree = 60
      PIDGyroStraight()
      target = -90
      PIDGyroTurning()
    EndIf
  Else
    degree = 100
    PIDLineTracking()
    PIDLineTrackingTillLine()
    Speaker.NOTE(50, "C4", 200)
    degree = 100
    PIDLineTracking()
    PIDLineTrackingTillLine()
    Speaker.NOTE(50, "C4", 200)
    target = 90
    PIDGyroTurning()
    degree = 390
    PIDLineTracking2()
    Motor.Move("C", 15, 320, "True")
    degree = 390
    PIDLineTracking2()
    Motor.Move("C", 15, 320, "True")
    Motor.StartSync("AD", -25, 25)
    Program.Delay(1000)
  EndIf
EndSub









Sub CollectWaitingCars2
  degree = 250
  PIDGyroStraight()
  Motor.StartSync("AD", 25, -25)
  Program.Delay(1000)
  PIDGyroStraightTillLine()
  waitingCars1 = 0
  waitingCars2 = 0
  For i = 1 To 8
    If parkingLots[i+4] = waitingCars[3] And parkingLot[1+4] = "Empty" Then
      waitingCars1 = i
    EndIf
  EndFor
  For i = 1 To 8
    If parkingLots[i+4] = waitingCars[4] And parkingLot[1+4] = "Empty" And i <> waitingCars1 Then
      waitingCars2 = i
    EndIf
  EndFor
  If waitingCars1 <> 0 And waitingCars2 <> 0 Then
    DepositWaitingCarsRight()
  Else
    DepositWaitingCarsLeft()
  EndIf
EndSub
Sub DepositWaitingCarsRight
  target = -95.0
  PIDGyroTurning()
  degree = 200
  PIDGyroReverse()
  Motor.StartSync("BC", -25, -25)
  Program.Delay(1000)
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  waitingCars[1] = "Green"
  waitingCars[2] = "Red"
  collecting = "False"
  StopMotor()
  speed = 30
  PIDGyroStraightTillLine()
  StopMotor()
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Program.Delay(1000)
  target = 80
  PIDGyroTurning()
  StopMotor()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 250 Or lightVal > 270
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", 10, -10)
  EndWhile
  StopMotor()
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  Motor.Stop("AD", "True")
  PIDLineTrackingTillLine()
  StopMotor()
  Program.Delay(500)
  For i = 1 To 4 Step 1
    If parkingLot[i] = "Empty" Then
      If waitingCars[3] = parkingLots[i] Then
        depositSide = "Left"
        deposit = "Right"
        DepositingCars()
        parkingLot[i] = "Waiting Cars"
        waitingCars[3] = "Placed"
      ElseIf waitingCars[3] = parkingLots[i+4] Then
        depositSide = "Left"
        deposit = "Left"
        DepositingCars()
        parkingLot[i+4] = "Waiting Cars"
        waitingCars[3] = "Placed"
      ElseIf waitingCars[4] = parkingLots[i] Then
        depositSide = "Right"
        deposit = "Right"
        DepositingCars()
        parkingLot[i] = "Waiting Cars"
        waitingCars[4] = "Placed"
      ElseIf waitingCars[4] = parkingLots[i+4] Then
        depositSide = "Right"
        deposit = "Left"
        DepositingCars()
        parkingLot[i+4] = "Waiting Cars"
        waitingCars[4] = "Placed"
      Else
        degree = 50
        PIDLineTracking()
      EndIf
    EndIf
    If i <> 4 Then
      PIDLineTrackingTillLine()
    EndIf
  EndFor
  If parkingLot[8] = "Empty" Then
    target = -90.0
    PIDGyroTurning()
    PIDGyroStraightTillLine()
    degree = 50
    PIDGyroStraight()
    target = -90.0
    PIDGyroTurning()
    Motor.StartSync("BC", -25, -25)
    Program.Delay(2000)
  Else
    Turn180()
    Motor.StartSync("BC", -25, -25)
    Program.Delay(2000)
    found = "False"
    For i = 7 To 5 Step 1
      If found = "False" Then
        degree = 100
        PIDLineTracking()
        PIDLineTrackingTillLine()
        If parkingLot[i] = "Empty" Then
          found = "True"
          target = 90.0
          PIDGyroTurning()
          PIDGyroStraightTillLine()
          target = 90.0
          PIDGyroTurning()
          For x = 1 To 8-i Step 1
            degree = 100
            PIDLineTracking()
            PIDLineTrackingTillLine()
          EndFor
          Turn180()
          Motor.StartSync("BC", -25, -25)
          Program.Delay(2000)
        EndIf
      EndIf
    EndFor
  EndIf
  collectRed = "False"
  compartment[1] = "False"
  compartment[2] = "False"
  For i = 12 To 9 Step 1
    Motor.Move("B", 20, 20, "True")
    StopMotor()
    colour[1] = i
    Sensor.SetMode(4, 2)
    colour[2] = Sensor.ReadRawValue(4,0)
    ParkedCarSort()
    If parkingLot[i] = "Red" Then
      collectRed = "True"
      bluegreencar1[3] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[3] = "Left"
      Else
        bluegreencar2[3] = parkingLotsSide[i]
      EndIf
      collect = 3
      depositSide = bluegreencar2[3]
      CollectionOfParkedCars()
    ElseIf parkingLot[i] = "Blue/Green" Then
      bluegreencar1[2] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[2] = "Left"
      Else
        bluegreencar2[2] = parkingLotsSide[i]
      EndIf
      collect = 2
      If bluegreencar2[2] = "Left" Then
        compartment[1] = "True"
      Else
        compartment[2] = "True"
      EndIf
      CollectionOfParkedCars()
    ElseIf collectRed = "True" And (i = 9 Or i = 10) And parkingLot[i] = "Empty" Then
      deposit = "Right"
      DepositingCars()
    EndIf
    If i <> 9 Then
      degree = 50
      PIDLineTracking()
      PIDLineTrackingTillLine()
    EndIf
  EndFor
  collectBlueGreen = "False"
  For i = 5 To 8 Step 1
    If parkingLot[i] = "Blue/Green" Then
      bluegreencar1[1] = i
      If parkingLotsSide[i] = "Both" Then
        bluegreencar2[1] = "Left"
      Else
        bluegreencar2[1] = parkingLotsSide[i]
      EndIf
      If bluegreencar2[1] = "Left" And compartment[1] = "False" Then
        collectBlueGreen = "True"
      ElseIf bluegreencar2[1] = "Right" And compartment[2] = "False" Then
        collectBlueGreen = "True"
      EndIf
    EndIf
  EndFor
  If collectBlueGreen Then
    degree = 200
    PIDLineTracking()
    Turn180()
    PIDLineTrackingTillLine()
    For i = 5 To 8 Step 1
      If bluegreencar1[1] = i Then
        collect = 1
        CollectionOfParkedCars()
      EndIf
      If i <> 8 Then
        degree = 50
        PIDLineTracking()
        PIDLineTrackingTillLine()
      EndIf
    EndFor
    Turn180()
    Motor.StartSync("BC", -25, -25)
    Program.Delay(2000)
    For i = 1 To 4 Step 1
      degree = 50
      PIDLineTracking()
      PIDLineTrackingTillLine()
    EndFor
  EndIf
  Motor.Move("B", 15, 160, "True")
  Program.Delay(500)
  Motor.Move("C", 15, 160, "True")
  Program.Delay(500)
  PIDLineTrackingTillLine2()
EndSub
Sub DepositWaitingCarsLeft
  target = 100.0
  PIDGyroTurning()
  degree = 200
  PIDGyroReverse()
  Motor.StartSync("BC", -25, -25)
  Program.Delay(1000)
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  waitingCars[1] = "Green"
  waitingCars[2] = "Red"
  collecting = "False"
  StopMotor()
  speed = 30
  PIDGyroStraightTillLine()
  StopMotor()
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Program.Delay(1000)
  target = 80
  PIDGyroTurning()
  StopMotor()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 250 Or lightVal > 270
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", 10, -10)
  EndWhile
  StopMotor()
  Motor.StartSync("AD", -20, 20)
  Program.Delay(1000)
  Motor.Stop("AD", "True")
  PIDLineTrackingTillLine()
  StopMotor()
  Program.Delay(500)
  deposit = "Right"
  For i = 5 To 8 Step 1
    If parkingLot[i] = "Empty" Then
      If parkingLots[i] = waitingCars[3] Then
        depositSide = "Left"
        DepositingCars()
      ElseIf parkingLots[i] = waitingCars[4] Then
        depositSide = "Right"
        DepositingCars()
      EndIf
    EndIf
  EndFor
  Turn180()
  Motor.StartSync("BC", -25, -25)
  Program.Delay(2000)
  For i = 9 To 12 Step 1
    Motor.Move("B", 20, 20, "True")
    StopMotor()
    colour[1] = i
    Sensor.SetMode(4, 2)
    colour[2] = Sensor.ReadRawValue(4,0)
    ParkedCarSort()
    If parkingLot[i] = "Empty" Then
      If parkingLots[i] = waitingCars[3] Then
        depositSide = "Left"
        DepositingCars()
      ElseIf parkingLots[i] = waitingCars[4] Then
        depositSide = "Right"
        DepositingCars()
      EndIf
    EndIf
  EndFor
  startNumber = 5
  endNumber = 12
  CollectParkedCars()
  Motor.Move("B", 15, 160, "True")
  Program.Delay(500)
  Motor.Move("C", 15, 160, "True")
  Program.Delay(500)
  PIDLineTrackingTillLine2()
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Program.Delay(1000)
  target = 80
  PIDGyroTurning()
  StopMotor()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 250 Or lightVal > 270
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", 10, -10)
  EndWhile
  StopMotor()
  PIDLineTrackingTillLine()
  degree = 50
  PIDGyroStraight()
  StopMotor()
  Program.Delay(1000)
  target = 80
  PIDGyroTurning()
  StopMotor()
  Sensor.SetMode(2, 4)
  rawValue = Sensor.ReadRaw(2,3)
  lightVal = rawValue[1]
  While lightVal < 250 Or lightVal > 270
    rawValue = Sensor.ReadRaw(2,3)
    lightVal = rawValue[1]
    Motor.StartSync("BC", 10, -10)
  EndWhile
  StopMotor()
  PIDLineTrackingTillLine2()
EndSub
Sub DepositParkedCars2
  'write code here (Needs Work)
EndSub
Sub CollectWaitingCars3
  'write code here (Needs Work)
EndSub
Sub DepositWaitingCars3
  'write code here (Needs Work)
EndSub
Sub DepositParkedCars3
  'write code here (Needs Work)
EndSub
Sub GoToPark
  'write code here (Needs Work)
EndSub

'OTHER FUNCTIONS
Sub WaitingCarSort
  If colour[2] = 2 Then
    waitingCars[colour[1]] = "Blue"
  ElseIf colour[2] = 3 Then
    waitingCars[colour[1]] = "Green"
  ElseIf colour[2] = 5 Then
    waitingCars[colour[1]] = "Red"
  EndIf
EndSub
Sub ParkedCarSort
  If colour[2] = 5 Then
    parkingLot[colour[1]] = "Red"
  ElseIf colour[2] = 2 Or colour[2] = 3 Then
    parkingLot[colour[1]] = "Blue/Green"
  ElseIf colour[2] = 4 Or colour[2] = 6 Then
    parkingLot[colour[1]] = "Wall"
  Else
    parkingLot[colour[1]] = "Empty"
  EndIf
EndSub
Sub Turn180
  speed = 40
  target = 180
  PIDGyroTurning()
  Program.Delay(500)
  Motor.Move("B", 15, 160, "True")
  Program.Delay(500)
  Motor.Move("C", 15, 160, "True")
  Program.Delay(500)
EndSub
Sub Turn1802
  Program.Delay(500)
  Motor.Move("C", -15, 320, "True")
  Program.Delay(500)
  Motor.Move("B", 15, 160, "True")
  Program.Delay(500)
  Motor.Move("C", -15, 170, "True")
  Program.Delay(500)
EndSub
Sub CollectionOfParkedCars
  Program.Delay(500)
  speed = 15
  If bluegreencar1[collect] > 4 Then
    direction = "Left"
  Else
    direction = "Right"
  EndIf
  LCD.Clear()
  LCD.write(1, 1, bluegreencar2[collect])
  LCD.write(1, 10, direction)
  Program.Delay(2000)
  If (bluegreencar2[collect] = "Left" And direction = "Right") Or (bluegreencar2[collect] = "Right" And direction = "Left") Then
    degree = 100
  ElseIf (bluegreencar2[collect]  = "Right" And direction = "Right") Or (bluegreencar2[collect]  = "Left" And direction = "Left") Then
    degree = 15
  EndIf
  PIDLineTracking()
  If direction = "Left" Then
    target = 90.0
  ElseIf direction = "Right" Then
    target = -90.0
  EndIf
  speed = 5
  PIDGyroTurning()
  StopMotor()
  Program.Delay(1000)
  speed = 10
  If bluegreencar2[collect] = "Left" Then
    side1 = "A"
    side2 = 1
  Else
    side1 = "D"
    side2 = -1
  EndIf
  If direction = "Left" Then
    degree = -180
  Else
    degree = -60
  EndIf
  Motor.Start(side1, side2*30)
  Program.Delay(500)
  StopMotor()
  PIDGyroReverse()
  StopMotor()
  Program.Delay(500)
  Motor.Start(side1, side2*-50)
  Program.Delay(1000)
  StopMotor()
  Motor.Move(side1, side2*100, 50, "True")
  StopMotor()
  Program.Delay(1000)
  degree = -60
  PIDGyroReverse()
  StopMotor()
  Motor.Start(side1, side2*-100)
  Program.Delay(1000)
  StopMotor()
  parkingLot[i] = "Empty"
  Motor.StartSync("AD", -20, 20)
  Program.Delay(2000)
  StopMotor()
  PIDGyroStraightTillLine()
  StopMotor()
  If direction = "Left" Then
    degree = 130
  Else
    degree = 30
  EndIf
  PIDGyroStraight()
  StopMotor()
  Motor.StartSync("AD", -50, 50)
  Program.Delay(3000)
  StopMotor()
  If direction = "Left" Then
    target = -90
  Else
    target = 90
  EndIf
  PIDGyroTurning()
EndSub
Sub DepositingCars
  degree = 70
  PIDLineTracking()
  StopMotor()
  Program.Delay(500)
  If deposit = "Left" Then
    target = 90
  ElseIf deposit = "Right" Then
    target = -90
  EndIf
  PIDGyroTurning()
  StopMotor()
  Program.Delay(1000)
  If deposit = "Left" Then
    degree = -120
  ElseIf deposit = "Right" Then
    degree = -150
  EndIf
  speed = 15
  PIDGyroReverse()
  StopMotor()
  If depositSide = "Left" Then
    Motor.StartSync("AD", 20, 20)
  Else
    Motor.StartSync("AD", -20, -20)
  EndIf
  Program.Delay(1000)
  StopMotor()
  If collect1stBatt Then
    degree = 50
  Else
    degree = 100
  EndIf
  PIDGyroStraight()
  StopMotor()
  If depositSide = "Left" Then
    Motor.Start("A", -50)
  Else
    Motor.Start("D", 50)
  EndIf
  Program.Delay(1000)
  StopMotor()
  PIDGyroStraightTillLine()
  StopMotor()
  degree = 40
  PIDGyroStraight()
  StopMotor()
  speed = 15
  If depositSide = "Left" Then
    Motor.Start("A", 120)
  Else
    Motor.Start("D", -120)
  EndIf
  Program.Delay(500)
  StopMotor()
  degree = -60
  PIDGyroReverse()
  StopMotor()
  If depositSide = "Left" Then
    Motor.Start("A", -120)
  Else
    Motor.Start("D", 120)
  EndIf
  Program.Delay(1500)
  StopMotor()
  degree = 60
  PIDGyroStraight()
  degree = 30
  PIDGyroStraight()
  StopMotor()
  Motor.StartSync("AD", -50, 50)
  Program.Delay(3000)
  StopMotor()
  target = 90
  PIDGyroTurning()
EndSub






'Code
Motor.Invert("B")
' CollectBatteries()
' CollectWaitingCars1()
' DepositWaitingCars()
' CollectParkedCars()
DepositParkedCars1()
CollectWaitingCars2()

'NOTE: set the degree
'target = 44
'degree = 1000
'target= 0
